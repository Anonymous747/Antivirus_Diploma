// This file was auto-generated by ML.NET Model Builder. 

using System;
using AntivirusML.Model;

namespace AntivirusML.ConsoleApp
{
    class Program
    {
        static void Main(string[] args)
        {
            // Create single instance of sample data from first line of dataset for model input
            ModelInput sampleData = new ModelInput()
            {
                Md5 = @"631ea355665f28d4707448e442fbf5b8",
                Machine = 332F,
                SizeOfOptionalHeader = 224F,
                Characteristics = 258F,
                MajorLinkerVersion = 9F,
                MinorLinkerVersion = 0F,
                SizeOfCode = 361984F,
                SizeOfInitializedData = 115712F,
                SizeOfUninitializedData = 0F,
                AddressOfEntryPoint = 6135F,
                BaseOfCode = 4096F,
                BaseOfData = 372736F,
                ImageBase = 4194304F,
                SectionAlignment = 4096F,
                FileAlignment = 512F,
                MajorOperatingSystemVersion = 0F,
                MinorOperatingSystemVersion = 0F,
                MajorImageVersion = 0F,
                MinorImageVersion = 0F,
                MajorSubsystemVersion = 1F,
                MinorSubsystemVersion = 0F,
                SizeOfImage = 1036288F,
                SizeOfHeaders = 1024F,
                CheckSum = 485887F,
                Subsystem = 16F,
                DllCharacteristics = 1024F,
                SizeOfStackReserve = 1048576F,
                SizeOfStackCommit = 4096F,
                SizeOfHeapReserve = 1048576F,
                SizeOfHeapCommit = 4096F,
                LoaderFlags = 0F,
                NumberOfRvaAndSizes = 16F,
                SectionsNb = 8F,
                SectionsMeanEntropy = 5.766807F,
                SectionsMinEntropy = 3.60743F,
                SectionsMaxEntropy = 7.221051F,
                SectionsMeanRawsize = 59712F,
                SectionsMinRawsize = 1024F,
                SectionMaxRawsize = 325120F,
                SectionsMeanVirtualsize = 126875.9F,
                SectionsMinVirtualsize = 896F,
                SectionMaxVirtualsize = 551848F,
                ImportsNbDLL = 0F,
                ImportsNb = 0F,
                ImportsNbOrdinal = 0F,
                ExportNb = 0F,
                ResourcesNb = 4F,
                ResourcesMeanEntropy = 3.262823F,
                ResourcesMinEntropy = 2.568844F,
                ResourcesMaxEntropy = 3.537939F,
                ResourcesMeanSize = 8797F,
                ResourcesMinSize = 216F,
                ResourcesMaxSize = 18032F,
                LoadConfigurationSize = 0F,
                VersionInformationSize = 16F,
            };

            // Make a single prediction on the sample data and print results
            var predictionResult = ConsumeModel.Predict(sampleData);

            Console.WriteLine("Using model to make single prediction -- Comparing actual Legitimate with predicted Legitimate from sample data...\n\n");
            Console.WriteLine($"Md5: {sampleData.Md5}");
            Console.WriteLine($"Machine: {sampleData.Machine}");
            Console.WriteLine($"SizeOfOptionalHeader: {sampleData.SizeOfOptionalHeader}");
            Console.WriteLine($"Characteristics: {sampleData.Characteristics}");
            Console.WriteLine($"MajorLinkerVersion: {sampleData.MajorLinkerVersion}");
            Console.WriteLine($"MinorLinkerVersion: {sampleData.MinorLinkerVersion}");
            Console.WriteLine($"SizeOfCode: {sampleData.SizeOfCode}");
            Console.WriteLine($"SizeOfInitializedData: {sampleData.SizeOfInitializedData}");
            Console.WriteLine($"SizeOfUninitializedData: {sampleData.SizeOfUninitializedData}");
            Console.WriteLine($"AddressOfEntryPoint: {sampleData.AddressOfEntryPoint}");
            Console.WriteLine($"BaseOfCode: {sampleData.BaseOfCode}");
            Console.WriteLine($"BaseOfData: {sampleData.BaseOfData}");
            Console.WriteLine($"ImageBase: {sampleData.ImageBase}");
            Console.WriteLine($"SectionAlignment: {sampleData.SectionAlignment}");
            Console.WriteLine($"FileAlignment: {sampleData.FileAlignment}");
            Console.WriteLine($"MajorOperatingSystemVersion: {sampleData.MajorOperatingSystemVersion}");
            Console.WriteLine($"MinorOperatingSystemVersion: {sampleData.MinorOperatingSystemVersion}");
            Console.WriteLine($"MajorImageVersion: {sampleData.MajorImageVersion}");
            Console.WriteLine($"MinorImageVersion: {sampleData.MinorImageVersion}");
            Console.WriteLine($"MajorSubsystemVersion: {sampleData.MajorSubsystemVersion}");
            Console.WriteLine($"MinorSubsystemVersion: {sampleData.MinorSubsystemVersion}");
            Console.WriteLine($"SizeOfImage: {sampleData.SizeOfImage}");
            Console.WriteLine($"SizeOfHeaders: {sampleData.SizeOfHeaders}");
            Console.WriteLine($"CheckSum: {sampleData.CheckSum}");
            Console.WriteLine($"Subsystem: {sampleData.Subsystem}");
            Console.WriteLine($"DllCharacteristics: {sampleData.DllCharacteristics}");
            Console.WriteLine($"SizeOfStackReserve: {sampleData.SizeOfStackReserve}");
            Console.WriteLine($"SizeOfStackCommit: {sampleData.SizeOfStackCommit}");
            Console.WriteLine($"SizeOfHeapReserve: {sampleData.SizeOfHeapReserve}");
            Console.WriteLine($"SizeOfHeapCommit: {sampleData.SizeOfHeapCommit}");
            Console.WriteLine($"LoaderFlags: {sampleData.LoaderFlags}");
            Console.WriteLine($"NumberOfRvaAndSizes: {sampleData.NumberOfRvaAndSizes}");
            Console.WriteLine($"SectionsNb: {sampleData.SectionsNb}");
            Console.WriteLine($"SectionsMeanEntropy: {sampleData.SectionsMeanEntropy}");
            Console.WriteLine($"SectionsMinEntropy: {sampleData.SectionsMinEntropy}");
            Console.WriteLine($"SectionsMaxEntropy: {sampleData.SectionsMaxEntropy}");
            Console.WriteLine($"SectionsMeanRawsize: {sampleData.SectionsMeanRawsize}");
            Console.WriteLine($"SectionsMinRawsize: {sampleData.SectionsMinRawsize}");
            Console.WriteLine($"SectionMaxRawsize: {sampleData.SectionMaxRawsize}");
            Console.WriteLine($"SectionsMeanVirtualsize: {sampleData.SectionsMeanVirtualsize}");
            Console.WriteLine($"SectionsMinVirtualsize: {sampleData.SectionsMinVirtualsize}");
            Console.WriteLine($"SectionMaxVirtualsize: {sampleData.SectionMaxVirtualsize}");
            Console.WriteLine($"ImportsNbDLL: {sampleData.ImportsNbDLL}");
            Console.WriteLine($"ImportsNb: {sampleData.ImportsNb}");
            Console.WriteLine($"ImportsNbOrdinal: {sampleData.ImportsNbOrdinal}");
            Console.WriteLine($"ExportNb: {sampleData.ExportNb}");
            Console.WriteLine($"ResourcesNb: {sampleData.ResourcesNb}");
            Console.WriteLine($"ResourcesMeanEntropy: {sampleData.ResourcesMeanEntropy}");
            Console.WriteLine($"ResourcesMinEntropy: {sampleData.ResourcesMinEntropy}");
            Console.WriteLine($"ResourcesMaxEntropy: {sampleData.ResourcesMaxEntropy}");
            Console.WriteLine($"ResourcesMeanSize: {sampleData.ResourcesMeanSize}");
            Console.WriteLine($"ResourcesMinSize: {sampleData.ResourcesMinSize}");
            Console.WriteLine($"ResourcesMaxSize: {sampleData.ResourcesMaxSize}");
            Console.WriteLine($"LoadConfigurationSize: {sampleData.LoadConfigurationSize}");
            Console.WriteLine($"VersionInformationSize: {sampleData.VersionInformationSize}");
            Console.WriteLine($"\n\nPredicted Legitimate value {predictionResult.Prediction} \nPredicted Legitimate scores: [{String.Join(",", predictionResult.Score)}]\n\n");
            Console.WriteLine("=============== End of process, hit any key to finish ===============");
            Console.ReadKey();
        }
    }
}
